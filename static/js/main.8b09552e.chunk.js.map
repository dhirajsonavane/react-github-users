{"version":3,"sources":["components/User.js","components/UserList.js","shared/NavBar.js","shared/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","backgroundColor","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","avatar","red","User","props","classes","user","Card","className","CardHeader","Avatar","aria-label","login","substring","toUpperCase","action","IconButton","title","subheader","CardMedia","image","avatar_url","CardContent","Typography","variant","color","component","CardActions","disableSpacing","target","href","UserList","useState","setErrors","planets","setPlanets","useEffect","a","fetch","json","then","res","catch","err","fetchData","length","Grid","container","style","padding","map","p","key","id","item","xs","sm","lg","xl","NavBar","AppBar","position","Toolbar","Copyright","Date","getFullYear","display","flexDirection","minHeight","main","marginTop","spacing","marginBottom","footer","palette","type","grey","Footer","Container","maxWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.8b09552e.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 10,\n    backgroundColor: \"#f7f7f7\",\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nconst User = (props) => {\n  const classes = useStyles();\n  const user = props.user;\n\n  return (\n    <div>\n      {!user ? null : (\n        <Card className={classes.root}>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                {user.login.substring(0, 1).toUpperCase()}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\">\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={user.login.toUpperCase()}\n            subheader=\"Github User\"\n          />\n\n          <CardMedia\n            className={classes.media}\n            image={user.avatar_url}\n            title={user.login}\n          />\n\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Lorem Ipsum is simply dummy text of the printing and typesetting\n              industry.\n            </Typography>\n          </CardContent>\n\n          <CardActions disableSpacing>\n            <IconButton aria-label=\"add to favorites\">\n              <FavoriteIcon />\n            </IconButton>\n\n            <a\n              target=\"_blank\"\n              href={`https://github.com/${user.login}`}\n            >\n              <IconButton aria-label=\"share\">\n                <GitHubIcon />\n              </IconButton>\n            </a>\n          </CardActions>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default User;\n","import React, { useState, useEffect } from \"react\";\nimport User from \"./User\";\nimport Grid from '@material-ui/core/Grid';\n\nconst UserList = () => {\n  const [hasError, setErrors] = useState(false);\n  const [planets, setPlanets] = useState({});\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"https://api.github.com/users\");\n      res\n        .json()\n        .then((res) => setPlanets(res))\n        .catch((err) => setErrors(err));\n    }\n    fetchData();\n  }, []);\n\n  return !planets.length ? (\n    <h1>Loading...</h1>\n  ) : (\n    <div>\n      <Grid container style={{ padding: 24 }}>\n        {planets.map((p) => (\n          <Grid key={p.id} item xs={12} sm={6} lg={4} xl={3}>\n            <User user={p} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default UserList;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst NavBar = () => {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" color=\"inherit\">\n            React Material UI - Display Github Users\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\">\n      {'Copyright Â© '}\n      <a color=\"inherit\" target='_blank' href=\"https://github.com/dhirajsonavane\">\n      React Material UI - Display Github Users\n      </a>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '10vh',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"body1\">Website created by Dhiraj Sonavane (dhiraj.sonavane@gmail.com)</Typography>\n          <Copyright />\n        </Container>\n      </footer>\n    </div>\n  );\n}","import React from 'react';\nimport UserList from './components/UserList';\nimport NavBar from './shared/NavBar';\nimport Footer from './shared/Footer';\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <NavBar />\n      <UserList />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}